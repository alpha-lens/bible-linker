/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BibleLinkerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/settings.ts
var DEFAULT_SETTINGS = {
  bibleRoot: "bible",
  defaultVersion: "\uAC1C\uC5ED\uAC1C\uC815",
  multiVersion: false,
  versions: [],
  outputFormat: "inline"
};

// src/settingTab.ts
var import_obsidian = require("obsidian");
var BibleLinkerSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    const settings = this.plugin.settings;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Bible Linker Settings" });
    new import_obsidian.Setting(containerEl).setName("\uC131\uACBD \uB8E8\uD2B8 \uD3F4\uB354").setDesc("\uC608: bible").addText(
      (text) => text.setPlaceholder("bible").setValue(settings.bibleRoot).onChange(async (value) => {
        settings.bibleRoot = value.trim();
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("\uB2E4\uC911 \uC5ED\uBCF8 \uC0AC\uC6A9").setDesc("\uC5EC\uB7EC \uC5ED\uBCF8\uC744 \uC9C0\uC6D0\uD558\uB824\uBA74 \uCCB4\uD06C\uD558\uC138\uC694.").addToggle(
      (toggle) => toggle.setValue(settings.multiVersion).onChange(async (value) => {
        settings.multiVersion = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    if (settings.multiVersion) {
      new import_obsidian.Setting(containerEl).setName("\uC5ED\uBCF8 \uBAA9\uB85D").setDesc("\uAC01 \uC904\uB9C8\uB2E4 \uC5ED\uBCF8 \uC774\uB984\uC744 \uC785\uB825\uD558\uC138\uC694.").addTextArea(
        (textArea) => textArea.setPlaceholder("\uAC1C\uC5ED\uAC1C\uC815\n\uC0C8\uBC88\uC5ED\n\uD760\uC815\uC5ED\nNIV").setValue(settings.versions.join("\n")).onChange(async (value) => {
          settings.versions = value.split("\n").map((v) => v.trim()).filter((v) => v.length > 0);
          await this.plugin.saveSettings();
        })
      );
    }
    new import_obsidian.Setting(containerEl).setName("\uCD9C\uB825 \uD615\uC2DD").setDesc("\uC131\uACBD \uC808 \uCD9C\uB825 \uD615\uC2DD\uC744 \uC120\uD0DD\uD558\uC138\uC694.").addDropdown((dropdown) => {
      dropdown.addOption("inline", "\uD55C \uC904\uB85C \uCD9C\uB825 (\uAE30\uBCF8)").addOption("verseBlock", "\uC808 \uB2E8\uC704 \uBE14\uB85D").addOption("callout", "Callout").setValue(this.plugin.settings.outputFormat).onChange(async (value) => {
        this.plugin.settings.outputFormat = value;
        await this.plugin.saveSettings();
      });
    });
  }
};

// src/modal.ts
var import_obsidian2 = require("obsidian");

// src/utils.ts
function parseVerses(input) {
  const match = input.match(/^([가-힣]+)(\d+):([\d, -]+)$/);
  if (!match)
    return null;
  const [, book, chapter, versePart] = match;
  const verses = [];
  versePart.split(",").forEach((part) => {
    if (part.includes("-")) {
      const [start, end] = part.split("-").map((v) => parseInt(v.trim()));
      for (let i = start; i <= end; i++) {
        verses.push(i);
      }
    } else {
      verses.push(parseInt(part.trim()));
    }
  });
  return { book, chapter, verses };
}
function findVerseContent(content, verse) {
  const regex = new RegExp(`#\\s*${verse}\\s*\\n([\\s\\S]*?)(?=\\n#|$)`, "m");
  const match = content.match(regex);
  return match && match[1] ? match[1].trim() : null;
}

// src/modal.ts
var BOOK_NAME_MAP = {
  \uCC3D: "\uCC3D\uC138\uAE30",
  \uCD9C: "\uCD9C\uC560\uAD7D\uAE30",
  \uB808: "\uB808\uC704\uAE30",
  \uBBFC: "\uBBFC\uC218\uAE30",
  \uC2E0: "\uC2E0\uBA85\uAE30",
  \uC218: "\uC5EC\uD638\uC218\uC544",
  \uC0BF: "\uC0AC\uC0AC\uAE30",
  \uB8FB: "\uB8FB\uAE30",
  \uC0BC\uC0C1: "\uC0AC\uBB34\uC5D8\uC0C1",
  \uC0BC\uD558: "\uC0AC\uBB34\uC5D8\uD558",
  \uC655\uC0C1: "\uC5F4\uC655\uAE30\uC0C1",
  \uC655\uD558: "\uC5F4\uC655\uAE30\uD558",
  \uB300\uC0C1: "\uC5ED\uB300\uC0C1",
  \uB300\uD558: "\uC5ED\uB300\uD558",
  \uC2A4: "\uC5D0\uC2A4\uB77C",
  \uB290: "\uB290\uD5E4\uBBF8\uC57C",
  \uC5D0: "\uC5D0\uC2A4\uB354",
  \uC6A5: "\uC6A5\uAE30",
  \uC2DC: "\uC2DC\uD3B8",
  \uC7A0: "\uC7A0\uC5B8",
  \uC804: "\uC804\uB3C4\uC11C",
  \uC544: "\uC544\uAC00",
  \uC0AC: "\uC774\uC0AC\uC57C",
  \uB818: "\uC608\uB808\uBBF8\uC57C",
  \uC560: "\uC608\uB808\uBBF8\uC57C\uC560\uAC00",
  \uAC94: "\uC5D0\uC2A4\uAC94",
  \uB2E8: "\uB2E4\uB2C8\uC5D8",
  \uD638: "\uD638\uC138\uC544",
  \uC69C: "\uC694\uC5D8",
  \uC554: "\uC544\uBAA8\uC2A4",
  \uC635: "\uC624\uBC14\uB31C",
  \uC698: "\uC694\uB098",
  \uBBF8: "\uBBF8\uAC00",
  \uB098: "\uB098\uD6D4",
  \uD569: "\uD558\uBC15\uAD6D",
  \uC2B5: "\uC2A4\uBC14\uB0D0",
  \uD559: "\uD559\uAC1C",
  \uC2A5: "\uC2A4\uAC00\uB7B4",
  \uB9D0: "\uB9D0\uB77C\uAE30",
  \uB9C8: "\uB9C8\uD0DC\uBCF5\uC74C",
  \uB9C9: "\uB9C8\uAC00\uBCF5\uC74C",
  \uB205: "\uB204\uAC00\uBCF5\uC74C",
  \uC694: "\uC694\uD55C\uBCF5\uC74C",
  \uD589: "\uC0AC\uB3C4\uD589\uC804",
  \uB86C: "\uB85C\uB9C8\uC11C",
  \uACE0\uC804: "\uACE0\uB9B0\uB3C4\uC804\uC11C",
  \uACE0\uD6C4: "\uACE0\uB9B0\uB3C4\uD6C4\uC11C",
  \uAC08: "\uAC08\uB77C\uB514\uC544\uC11C",
  \uC5E1: "\uC5D0\uBCA0\uC18C\uC11C",
  \uBE4C: "\uBE4C\uB9BD\uBCF4\uC11C",
  \uACE8: "\uACE8\uB85C\uC0C8\uC11C",
  \uC0B4\uC804: "\uB370\uC0B4\uB85C\uB2C8\uAC00\uC804\uC11C",
  \uC0B4\uD6C4: "\uB370\uC0B4\uB85C\uB2C8\uAC00\uD6C4\uC11C",
  \uB524\uC804: "\uB514\uBAA8\uB370\uC804\uC11C",
  \uB524\uD6C4: "\uB514\uBAA8\uB370\uD6C4\uC11C",
  \uB51B: "\uB514\uB3C4\uC11C",
  \uBAAC: "\uBE4C\uB808\uBAAC\uC11C",
  \uD788: "\uD788\uBE0C\uB9AC\uC11C",
  \uC57D: "\uC57C\uACE0\uBCF4\uC11C",
  \uBCA7\uC804: "\uBCA0\uB4DC\uB85C\uC804\uC11C",
  \uBCA7\uD6C4: "\uBCA0\uB4DC\uB85C\uD6C4\uC11C",
  \uC694\uC77C: "\uC694\uD55C\uC77C\uC11C",
  \uC694\uC774: "\uC694\uD55C\uC774\uC11C",
  \uC694\uC0BC: "\uC694\uD55C\uC0BC\uC11C",
  \uC720: "\uC720\uB2E4\uC11C",
  \uACC4: "\uC694\uD55C\uACC4\uC2DC\uB85D"
};
var BibleLinkerModal = class extends import_obsidian2.Modal {
  constructor(app, editor, settings) {
    super(app);
    this.editor = editor;
    this.settings = settings;
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "\uC131\uACBD \uC808 \uCC3E\uAE30" });
    let versionSelect = null;
    if (this.settings.multiVersion && this.settings.versions.length > 0) {
      versionSelect = contentEl.createEl("select");
      this.settings.versions.forEach((v) => {
        if (versionSelect) {
          const option = document.createElement("option");
          option.text = v;
          versionSelect.appendChild(option);
        }
      });
    }
    const formatSelect = contentEl.createEl("select");
    ["inline", "verseBlock", "callout"].forEach((format) => {
      const option = document.createElement("option");
      option.value = format;
      option.text = format === "inline" ? "\uC778\uB77C\uC778" : format === "verseBlock" ? "\uC808\uBCC4 \uBE14\uB85D" : "\uCF5C\uC544\uC6C3";
      formatSelect.appendChild(option);
    });
    formatSelect.value = this.settings.outputFormat;
    const input = contentEl.createEl("input", {
      type: "text",
      placeholder: "\uC608: \uCC3D1:1-2"
    });
    const resultDiv = contentEl.createEl("div");
    resultDiv.style.marginTop = "1em";
    const insertButton = contentEl.createEl("button", { text: "\uC0BD\uC785" });
    insertButton.style.marginTop = "1em";
    insertButton.disabled = true;
    let lastResult = "";
    input.addEventListener("keydown", async (event) => {
      if (event.key === "Enter") {
        const verseInput = input.value.trim();
        const parsed = parseVerses(verseInput);
        if (!parsed) {
          new import_obsidian2.Notice("\uC62C\uBC14\uB978 \uD615\uC2DD\uC774 \uC544\uB2D9\uB2C8\uB2E4. \uC608: \uCC3D1:1-2");
          return;
        }
        const { book, chapter, verses } = parsed;
        const bookName = BOOK_NAME_MAP[book] || book;
        let selectedVersion = versionSelect ? versionSelect.value : this.settings.defaultVersion;
        const filePath = this.settings.multiVersion ? `${this.settings.bibleRoot}/${selectedVersion}/${book}/${book}${chapter}.md` : `${this.settings.bibleRoot}/${book}/${book}${chapter}.md`;
        const file = this.app.vault.getAbstractFileByPath(filePath);
        if (!(file instanceof import_obsidian2.TFile)) {
          new import_obsidian2.Notice(`\uD30C\uC77C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4: ${filePath}`);
          return;
        }
        try {
          const content = await this.app.vault.read(file);
          const results = verses.map((verse) => {
            const verseContent = findVerseContent(content, verse);
            return verseContent ? `${book}${chapter}:${verse} ${verseContent}` : `${book}${chapter}:${verse} (\uBCF8\uBB38 \uC5C6\uC74C)`;
          });
          const outputFormat = formatSelect.value;
          switch (outputFormat) {
            case "inline":
              lastResult = `${bookName} ${chapter}\uC7A5
` + results.map((r) => {
                const colonIdx = r.indexOf(":");
                return colonIdx !== -1 ? r.slice(colonIdx + 1).trim() : r;
              }).join(" ");
              break;
            case "verseBlock":
              lastResult = `${bookName} ${chapter}\uC7A5
` + results.map((r) => {
                const colonIdx = r.indexOf(":");
                return colonIdx !== -1 ? r.slice(colonIdx + 1).trim() : r;
              }).join("\n");
              break;
            case "callout":
              lastResult = `>[!note]+ ${bookName} ${chapter}\uC7A5
` + results.map((r) => {
                const colonIdx = r.indexOf(":");
                return colonIdx !== -1 ? `> ${r.slice(colonIdx + 1).trim()}` : `> ${r}`;
              }).join("\n");
              break;
          }
          resultDiv.innerText = lastResult;
          insertButton.disabled = false;
        } catch (err) {
          console.error(err);
          new import_obsidian2.Notice("\uD30C\uC77C\uC744 \uC77D\uB294 \uB3C4\uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.");
        }
      }
    });
    insertButton.addEventListener("click", () => {
      if (lastResult) {
        this.editor.replaceRange(lastResult, this.editor.getCursor());
        new import_obsidian2.Notice("\uBCF8\uBB38\uC774 \uC0BD\uC785\uB418\uC5C8\uC2B5\uB2C8\uB2E4.");
        this.close();
      }
    });
    setTimeout(() => input.focus(), 0);
  }
  onClose() {
    this.contentEl.empty();
  }
};

// main.ts
var BibleLinkerPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new BibleLinkerSettingTab(this.app, this));
    this.addCommand({
      id: "open-bible-linker",
      name: "\uC131\uACBD \uC808 \uCC3E\uAE30",
      editorCallback: (editor) => {
        new BibleLinkerModal(this.app, editor, this.settings).open();
      },
      hotkeys: [
        {
          modifiers: ["Mod", "Shift"],
          key: "b"
        }
      ]
    });
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
